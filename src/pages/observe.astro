---
import Layout from '~/layouts/PageLayout.astro';
import HeroText from '~/components/widgets/HeroText.astro';
import Features2 from '~/components/widgets/Features2.astro';

const metadata = {
  title: 'Observe',
};
---

<Layout metadata={metadata}>
  <!-- HeroText Widget ******************* -->
  <HeroText tagline="Observe" title="Control Panel" />

  <!-- Instruction Panel -->
  <div
    class="max-w-xl mx-auto rounded-lg backdrop-blur border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 shadow p-4 sm:p-6 lg:p-8 w-full"
  >
    Go to <a
      class="bold underline border-yellow-500"
      href="https://stellarium-web.org/"
      target="_blank"
      rel="noopener noreferrer">Stellarium</a
    >, set the location as "Princeton", and time as the current time. Then start to find your star and observe! A more
    detailed guide to find your stars is available <a
      class="bold underline border-yellow-500"
      href="https://docs.google.com/document/d/e/2PACX-1vQYncAuxxHOp9nn7c-zlQgzz-zZ5lejJGyGF9-J6DKV72fv0ySl7CmTAm-ej4Yr5AWlEQLJzjiJGXCa/pub"
      >here</a
    >.
  </div>

  <div>
    <p style="color: black;">.</p>
  </div>
  <!-- Contact Form -->
  <form
    id="contactForm"
    class="space-y-4 max-w-xl mx-auto rounded-lg backdrop-blur border border-gray-200 dark:border-gray-700 bg-slate-400 dark:bg-slate-900 shadow p-4 sm:p-6 lg:p-8 w-full"
  >
    <h2 class="text-xl font-semibold">Control the PRISMS Small Radio Telescope.</h2>

    <!-- Observation Label -->
    <label for="name" class="block font-medium">Observation Label</label>
    <input
      type="text"
      id="name"
      name="name"
      required
      minlength="2"
      style="color: black;"
      class="block w-full border rounded-md p-2"
    />

    <!-- Central Frequency -->
    <label for="frequency" class="block font-medium">Central Frequency (MHz)</label>
    <input
      type="number"
      id="frequency"
      name="frequency"
      style="color: black;"
      required
      min="100"
      max="500"
      class="block w-full border rounded-md p-2"
    />

    <!-- Bandwidth -->
    <label for="bandwidth" class="block font-medium">Bandwidth (MHz)</label>
    <input
      type="number"
      id="bandwidth"
      name="bandwidth"
      style="color: black;"
      required
      min="10"
      max="200"
      class="block w-full border rounded-md p-2"
    />

    <!-- Duration -->
    <label for="duration" class="block font-medium">Duration (minutes)</label>
    <input
      type="number"
      id="duration"
      name="duration"
      style="color: black;"
      required
      min="1"
      max="120"
      class="block w-full border rounded-md p-2"
    />

    <!-- Location -->
    <label for="location" class="block font-medium">Location</label>
    <input
      type="text"
      id="location"
      name="location"
      style="color: black;"
      required
      minlength="2"
      class="block w-full border rounded-md p-2"
    />

    <!-- nbins -->
    <label for="nbins" class="block font-medium">nbins</label>
    <input
      type="number"
      id="nbins"
      name="nbins"
      style="color: black;"
      required
      min="1"
      max="1000"
      class="block w-full border rounded-md p-2"
    />

    <!-- Email -->
    <label for="email" class="block font-medium">Email</label>
    <input
      type="email"
      id="email"
      name="email"
      style="color: black;"
      required
      class="block w-full border rounded-md p-2"
    />

    <button type="submit" class="w-full bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600">
      Start Observation
    </button>
    <div id="formFeedback" class="text-sm mt-2"></div>
  </form>

  <!-- Features2 Widget ******************* -->
  <Features2
    title="We are here to help!"
    items={[
      {
        title: 'Website',
        description: 'probservatory.org',
        icon: 'tabler:device-desktop-star',
      },
      {
        title: 'Email',
        description: 'prisms.observatory@gmail.com',
        icon: 'tabler:mail',
      },
      {
        title: 'Location',
        description: '19 Lambert Dr, Princeton, NJ, USA',
        icon: 'tabler:map-pin',
      },
    ]}
  />
</Layout>

<script type="module">
  import { initializeApp } from 'https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js';
  import { getFirestore, addDoc, collection } from 'https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js';

  const firebaseConfig = {
    apiKey: 'AIzaSyA56Ha9_Hds0GrJ-iJZ_ayPeqUy46xJw7c',
    authDomain: 'psrt-data.firebaseapp.com',
    projectId: 'psrt-data',
    storageBucket: 'psrt-data.firebasestorage.app',
    messagingSenderId: '522997813054',
    appId: '1:522997813054:web:0baa7dd543b947f248266f',
    measurementId: 'G-DFVS3PHZYN',
  };

  const app = initializeApp(firebaseConfig);
  const db = getFirestore(app);

  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('contactForm');
    const feedback = document.getElementById('formFeedback');

    form.addEventListener('submit', async (event) => {
      event.preventDefault();

      const formData = new FormData(form);
      const observation = Object.fromEntries(formData.entries());

      // Validate values
      const frequency = parseFloat(observation.frequency);
      const bandwidth = parseFloat(observation.bandwidth);
      const duration = parseFloat(observation.duration);
      const nbins = parseFloat(observation.nbins);

      if (frequency < 100 || frequency > 500) {
        feedback.textContent = 'Central Frequency must be between 100 and 500 MHz.';
        feedback.style.color = 'red';
        return;
      }

      if (bandwidth < 10 || bandwidth > 200) {
        feedback.textContent = 'Bandwidth must be between 10 and 200 MHz.';
        feedback.style.color = 'red';
        return;
      }

      if (duration < 1 || duration > 120) {
        feedback.textContent = 'Duration must be between 1 and 120 minutes.';
        feedback.style.color = 'red';
        return;
      }

      if (nbins < 1 || nbins > 1000) {
        feedback.textContent = 'nbins must be between 1 and 1000.';
        feedback.style.color = 'red';
        return;
      }

      try {
        // Add to Firestore
        await addDoc(collection(db, 'observations'), {
          ...observation,
          timestamp: new Date(),
        });

        feedback.textContent = 'Observation request submitted successfully!';
        feedback.style.color = 'green';
        form.reset();
      } catch (error) {
        feedback.textContent = 'Error submitting request. Please try again.';
        feedback.style.color = 'red';
        console.error('Error:', error);
      }
    });
  });
</script>
